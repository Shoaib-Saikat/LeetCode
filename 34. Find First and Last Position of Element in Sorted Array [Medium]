class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        array = nums
        target = target

        def binarySearch(array, target, condition):
            lo = 0
            hi = len(array)-1

            while lo <= hi:
                mid = (lo+hi)//2
                result = condition(mid)

                if result == 'found':
                    return mid
                elif result == 'left':
                    hi = mid - 1
                elif result == 'right':
                    lo = mid + 1
            return -1

        def firstPosition(array, target):
            # for an array with ascending order
            def conditionFirstPosition(mid):
                if array[mid] == target:
                    if mid > 0 and array[mid-1] == target:
                        return 'left'
                    else:
                        return 'found'
                elif array[mid] > target:
                    return 'left'
                elif array[mid] < target:
                    return 'right'
            return binarySearch(array, target, conditionFirstPosition)

        def lastPosition(array, target):
            # for an array with descendign order
            def conditionLastPosition(mid):
                if array[mid] == target:
                    if mid < len(array)-1 and array[mid+1] == target:
                        return 'right'
                    else:
                        return 'found'
                elif array[mid] > target:
                    return 'left'
                elif array[mid] < target:
                    return 'right'
            return binarySearch(array, target, conditionLastPosition)

        first = firstPosition(array, target)
        last = lastPosition(array, target)

        out=[first,last]

        return out
